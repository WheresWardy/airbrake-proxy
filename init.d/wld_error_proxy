#!/bin/bash

# error-proxy
# init.d script for error-proxy Node app
#
# chkconfig: 345 80 20

if [[ $( id -u ) -ne 0 ]]; then
        echo "You must be root to run this script"
        exit 1
fi

[[ -f ~/.bashrc ]] && source ~/.bashrc || source /etc/bashrc
[[ -f ~/.bash_profile ]] && source ~/.bash_profile || source /etc/profile

APP_NAME="error-proxy"
APP_PATH="/var/www/apps/error-proxy/current"
APP_EXEC="server.js"
APP_NODE="/opt/nodejs-0.10/bin/node"
RETVAL="0"

pid() {
        pidof -s $APP_NAME 2>/dev/null
}

start() {
        if [[ -n `pid` ]]; then
                echo "$APP_NAME is already running (`pid`)"
                RETVAL=1
                return
        fi

        echo -ne "Starting $APP_NAME... "

        cd $APP_PATH
        nohup $APP_NODE $APP_EXEC >> log/$WLD_ENV.log 2>&1 &

        sleep 1
        if [[ -z `pid` ]]; then
                echo "failed"
                RETVAL=1
                return
        fi

        echo "done"
}

stop() {
        if [[ -z `pid` ]]; then
                echo "$APP_NAME is not running"
                RETVAL=1
                return
        fi

        echo -ne "Stopping $APP_NAME... "
        kill -15 `pid`

        WAIT=0
        while [[ $WAIT -lt 10 ]]; do
                sleep 1

                if [[ -z `pid` ]]; then
                        echo "done"
                        RETVAL=0
                        return
                fi

                WAIT=$(( WAIT + 1 ))
        done

        echo "failed"
        RETVAL=1
}

status() {
        if [[ -z `pid` ]]; then
                echo "$APP_NAME process not found"
                RETVAL="1"
        else
                echo "$APP_NAME is running (`pid`)"
                RETVAL="0"
        fi
}

case "$1" in
          start) start ;;
           stop) stop  ;;
        restart) stop
                 start
                 ;;
         status) status ;;
              *) echo "Usage: `basename $0` [ start | stop | restart | status ]"
                 ;;
esac

exit $RETVAL
